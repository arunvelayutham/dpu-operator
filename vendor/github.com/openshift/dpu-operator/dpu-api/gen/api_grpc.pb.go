// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: api.proto

package dpu_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LifeCycleService_Init_FullMethodName = "/Vendor.LifeCycleService/Init"
)

// LifeCycleServiceClient is the client API for LifeCycleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LifeCycleServiceClient interface {
	Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*IpPort, error)
}

type lifeCycleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLifeCycleServiceClient(cc grpc.ClientConnInterface) LifeCycleServiceClient {
	return &lifeCycleServiceClient{cc}
}

func (c *lifeCycleServiceClient) Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*IpPort, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IpPort)
	err := c.cc.Invoke(ctx, LifeCycleService_Init_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LifeCycleServiceServer is the server API for LifeCycleService service.
// All implementations must embed UnimplementedLifeCycleServiceServer
// for forward compatibility.
type LifeCycleServiceServer interface {
	Init(context.Context, *InitRequest) (*IpPort, error)
	mustEmbedUnimplementedLifeCycleServiceServer()
}

// UnimplementedLifeCycleServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLifeCycleServiceServer struct{}

func (UnimplementedLifeCycleServiceServer) Init(context.Context, *InitRequest) (*IpPort, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedLifeCycleServiceServer) mustEmbedUnimplementedLifeCycleServiceServer() {}
func (UnimplementedLifeCycleServiceServer) testEmbeddedByValue()                          {}

// UnsafeLifeCycleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LifeCycleServiceServer will
// result in compilation errors.
type UnsafeLifeCycleServiceServer interface {
	mustEmbedUnimplementedLifeCycleServiceServer()
}

func RegisterLifeCycleServiceServer(s grpc.ServiceRegistrar, srv LifeCycleServiceServer) {
	// If the following call pancis, it indicates UnimplementedLifeCycleServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LifeCycleService_ServiceDesc, srv)
}

func _LifeCycleService_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LifeCycleServiceServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LifeCycleService_Init_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LifeCycleServiceServer).Init(ctx, req.(*InitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LifeCycleService_ServiceDesc is the grpc.ServiceDesc for LifeCycleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LifeCycleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Vendor.LifeCycleService",
	HandlerType: (*LifeCycleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _LifeCycleService_Init_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

const (
	NetworkFunctionService_CreateNetworkFunction_FullMethodName = "/Vendor.NetworkFunctionService/CreateNetworkFunction"
	NetworkFunctionService_DeleteNetworkFunction_FullMethodName = "/Vendor.NetworkFunctionService/DeleteNetworkFunction"
)

// NetworkFunctionServiceClient is the client API for NetworkFunctionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkFunctionServiceClient interface {
	CreateNetworkFunction(ctx context.Context, in *NFRequest, opts ...grpc.CallOption) (*Empty, error)
	DeleteNetworkFunction(ctx context.Context, in *NFRequest, opts ...grpc.CallOption) (*Empty, error)
}

type networkFunctionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkFunctionServiceClient(cc grpc.ClientConnInterface) NetworkFunctionServiceClient {
	return &networkFunctionServiceClient{cc}
}

func (c *networkFunctionServiceClient) CreateNetworkFunction(ctx context.Context, in *NFRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, NetworkFunctionService_CreateNetworkFunction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkFunctionServiceClient) DeleteNetworkFunction(ctx context.Context, in *NFRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, NetworkFunctionService_DeleteNetworkFunction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkFunctionServiceServer is the server API for NetworkFunctionService service.
// All implementations must embed UnimplementedNetworkFunctionServiceServer
// for forward compatibility.
type NetworkFunctionServiceServer interface {
	CreateNetworkFunction(context.Context, *NFRequest) (*Empty, error)
	DeleteNetworkFunction(context.Context, *NFRequest) (*Empty, error)
	mustEmbedUnimplementedNetworkFunctionServiceServer()
}

// UnimplementedNetworkFunctionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNetworkFunctionServiceServer struct{}

func (UnimplementedNetworkFunctionServiceServer) CreateNetworkFunction(context.Context, *NFRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNetworkFunction not implemented")
}
func (UnimplementedNetworkFunctionServiceServer) DeleteNetworkFunction(context.Context, *NFRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNetworkFunction not implemented")
}
func (UnimplementedNetworkFunctionServiceServer) mustEmbedUnimplementedNetworkFunctionServiceServer() {
}
func (UnimplementedNetworkFunctionServiceServer) testEmbeddedByValue() {}

// UnsafeNetworkFunctionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkFunctionServiceServer will
// result in compilation errors.
type UnsafeNetworkFunctionServiceServer interface {
	mustEmbedUnimplementedNetworkFunctionServiceServer()
}

func RegisterNetworkFunctionServiceServer(s grpc.ServiceRegistrar, srv NetworkFunctionServiceServer) {
	// If the following call pancis, it indicates UnimplementedNetworkFunctionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NetworkFunctionService_ServiceDesc, srv)
}

func _NetworkFunctionService_CreateNetworkFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NFRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkFunctionServiceServer).CreateNetworkFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkFunctionService_CreateNetworkFunction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkFunctionServiceServer).CreateNetworkFunction(ctx, req.(*NFRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkFunctionService_DeleteNetworkFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NFRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkFunctionServiceServer).DeleteNetworkFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkFunctionService_DeleteNetworkFunction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkFunctionServiceServer).DeleteNetworkFunction(ctx, req.(*NFRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NetworkFunctionService_ServiceDesc is the grpc.ServiceDesc for NetworkFunctionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetworkFunctionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Vendor.NetworkFunctionService",
	HandlerType: (*NetworkFunctionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNetworkFunction",
			Handler:    _NetworkFunctionService_CreateNetworkFunction_Handler,
		},
		{
			MethodName: "DeleteNetworkFunction",
			Handler:    _NetworkFunctionService_DeleteNetworkFunction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

const (
	DeviceService_GetDevices_FullMethodName = "/Vendor.DeviceService/GetDevices"
	DeviceService_SetNumVfs_FullMethodName  = "/Vendor.DeviceService/SetNumVfs"
)

// DeviceServiceClient is the client API for DeviceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceServiceClient interface {
	GetDevices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DeviceListResponse, error)
	SetNumVfs(ctx context.Context, in *VfCount, opts ...grpc.CallOption) (*VfCount, error)
}

type deviceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceServiceClient(cc grpc.ClientConnInterface) DeviceServiceClient {
	return &deviceServiceClient{cc}
}

func (c *deviceServiceClient) GetDevices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DeviceListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeviceListResponse)
	err := c.cc.Invoke(ctx, DeviceService_GetDevices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) SetNumVfs(ctx context.Context, in *VfCount, opts ...grpc.CallOption) (*VfCount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VfCount)
	err := c.cc.Invoke(ctx, DeviceService_SetNumVfs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceServiceServer is the server API for DeviceService service.
// All implementations must embed UnimplementedDeviceServiceServer
// for forward compatibility.
type DeviceServiceServer interface {
	GetDevices(context.Context, *Empty) (*DeviceListResponse, error)
	SetNumVfs(context.Context, *VfCount) (*VfCount, error)
	mustEmbedUnimplementedDeviceServiceServer()
}

// UnimplementedDeviceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDeviceServiceServer struct{}

func (UnimplementedDeviceServiceServer) GetDevices(context.Context, *Empty) (*DeviceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevices not implemented")
}
func (UnimplementedDeviceServiceServer) SetNumVfs(context.Context, *VfCount) (*VfCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNumVfs not implemented")
}
func (UnimplementedDeviceServiceServer) mustEmbedUnimplementedDeviceServiceServer() {}
func (UnimplementedDeviceServiceServer) testEmbeddedByValue()                       {}

// UnsafeDeviceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceServiceServer will
// result in compilation errors.
type UnsafeDeviceServiceServer interface {
	mustEmbedUnimplementedDeviceServiceServer()
}

func RegisterDeviceServiceServer(s grpc.ServiceRegistrar, srv DeviceServiceServer) {
	// If the following call pancis, it indicates UnimplementedDeviceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DeviceService_ServiceDesc, srv)
}

func _DeviceService_GetDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_GetDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetDevices(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_SetNumVfs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VfCount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).SetNumVfs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_SetNumVfs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).SetNumVfs(ctx, req.(*VfCount))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceService_ServiceDesc is the grpc.ServiceDesc for DeviceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Vendor.DeviceService",
	HandlerType: (*DeviceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDevices",
			Handler:    _DeviceService_GetDevices_Handler,
		},
		{
			MethodName: "SetNumVfs",
			Handler:    _DeviceService_SetNumVfs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

const (
	HeartbeatService_Ping_FullMethodName = "/Vendor.HeartbeatService/Ping"
)

// HeartbeatServiceClient is the client API for HeartbeatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HeartbeatServiceClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
}

type heartbeatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHeartbeatServiceClient(cc grpc.ClientConnInterface) HeartbeatServiceClient {
	return &heartbeatServiceClient{cc}
}

func (c *heartbeatServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, HeartbeatService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HeartbeatServiceServer is the server API for HeartbeatService service.
// All implementations must embed UnimplementedHeartbeatServiceServer
// for forward compatibility.
type HeartbeatServiceServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	mustEmbedUnimplementedHeartbeatServiceServer()
}

// UnimplementedHeartbeatServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHeartbeatServiceServer struct{}

func (UnimplementedHeartbeatServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedHeartbeatServiceServer) mustEmbedUnimplementedHeartbeatServiceServer() {}
func (UnimplementedHeartbeatServiceServer) testEmbeddedByValue()                          {}

// UnsafeHeartbeatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HeartbeatServiceServer will
// result in compilation errors.
type UnsafeHeartbeatServiceServer interface {
	mustEmbedUnimplementedHeartbeatServiceServer()
}

func RegisterHeartbeatServiceServer(s grpc.ServiceRegistrar, srv HeartbeatServiceServer) {
	// If the following call pancis, it indicates UnimplementedHeartbeatServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HeartbeatService_ServiceDesc, srv)
}

func _HeartbeatService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeartbeatServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HeartbeatService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeartbeatServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HeartbeatService_ServiceDesc is the grpc.ServiceDesc for HeartbeatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HeartbeatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Vendor.HeartbeatService",
	HandlerType: (*HeartbeatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _HeartbeatService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
